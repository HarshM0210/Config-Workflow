name: SU2 Validation Pipeline

env:
  SU2_CACHE_KEY: ${{ runner.os }}-su2-${{ hashFiles('SU2/meson.build') }}-v1

on:
  workflow_dispatch:
    inputs:
      category:
        description: "Validation Case Category"
        required: true
        type: choice
        options:
          - Basic
          - Extended
      case_code:
        description: "Validation Case Code (e.g., 2DML)"
        required: true
        type: string
      turbulence_model:
        description: "Turbulence Model"
        required: true
        type: choice
        options:
          - SA
          - SST
      configuration:
        description: "Specific Configuration (e.g., Configuration1) or All"
        required: true
        type: string
      author_name:
        description: "Author Name"
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Main Repo
        uses: actions/checkout@v4
        with:
          path: main-repo

      - name: Download Mesh and Restart Files from Google Drive
        run: |
          pip install gdown
          gdown --folder https://drive.google.com/drive/folders/1z6kSNo4Y62idDN3zTWsugMJhOEdpLt2r?usp=sharing -O turbmodels --fuzzy

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential cmake ninja-build libopenmpi-dev openmpi-bin swig \
            libboost-all-dev libmetis-dev libparmetis-dev libhdf5-dev zlib1g-dev \
            python3-dev python3-pip git wget libgl1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy matplotlib pyvista pandas

      - name: Cache SU2 build
        id: cache-su2
        uses: actions/cache@v4
        with:
          path: |
            SU2/build
            /usr/local/bin/SU2_*
            /usr/local/include/su2
            /usr/local/lib/libsu2*
            /usr/local/lib/python*/site-packages/su2
          key: ${{ env.SU2_CACHE_KEY }}

      - name: Install SU2
        run: |
          git clone https://github.com/su2code/SU2.git
          cd SU2
          git checkout -b develop origin/develop
          python meson.py build -Dwith-mpi=disabled -Denable-pywrapper=true --prefix=/usr/local
          ninja -C build
          sudo ninja -C build install
          sudo ldconfig
          echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV

      - name: Process Configurations
        run: |
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          TURB_MODEL="${{ inputs.turbulence_model }}"
          CONFIG="${{ inputs.configuration }}"
          AUTHOR="${{ inputs.author_name }}"

          BASE_PATH="main-repo/ValidationCases/$CATEGORY/$CASE_CODE/$TURB_MODEL"
          MESH_BASE_PATH="turbmodels/Mesh_Files/$CATEGORY/$CASE_CODE"
          RESTART_BASE_PATH="turbmodels/Restart_Files/$CATEGORY/$CASE_CODE/$TURB_MODEL"

          # Create results directory
          mkdir -p results

          if [ "$CONFIG" = "All" ]; then
            # Process all configurations
            ARTIFACT_NAME="${CATEGORY}_${CASE_CODE}_${TURB_MODEL}_${AUTHOR}_All"
            mkdir -p "results/$ARTIFACT_NAME"
            
            for config_dir in "$BASE_PATH"/Configuration*; do
              if [ -d "$config_dir" ]; then
                CONFIG_NAME=$(basename "$config_dir")
                echo "Processing $CONFIG_NAME"
                
                # Create config-specific result directory
                mkdir -p "results/$ARTIFACT_NAME/$CONFIG_NAME"
                
                # Process this configuration
                python3 main-repo/ValidationCases/Automation.py \
                  --category "$CATEGORY" \
                  --case-code "$CASE_CODE" \
                  --turbulence-model "$TURB_MODEL" \
                  --configuration "$CONFIG_NAME" \
                  --mesh-path "$MESH_BASE_PATH" \
                  --restart-path "$RESTART_BASE_PATH" \
                  --main-path "$BASE_PATH" \
                  --output-path "results/$ARTIFACT_NAME/$CONFIG_NAME"
              fi
            done
          else
            # Process specific configuration
            ARTIFACT_NAME="${CATEGORY}_${CASE_CODE}_${TURB_MODEL}_${CONFIG}_${AUTHOR}"
            mkdir -p "results/$ARTIFACT_NAME"
            
            echo "Processing $CONFIG"
            python3 main-repo/ValidationCases/Automation.py \
              --category "$CATEGORY" \
              --case-code "$CASE_CODE" \
              --turbulence-model "$TURB_MODEL" \
              --configuration "$CONFIG" \
              --mesh-path "$MESH_BASE_PATH" \
              --restart-path "$RESTART_BASE_PATH" \
              --main-path "$BASE_PATH" \
              --output-path "results/$ARTIFACT_NAME"
          fi

      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.category }}_${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${{ inputs.configuration == 'All' && format('{0}_All', inputs.author_name) || format('{0}_{1}', inputs.configuration, inputs.author_name) }}
          path: results/

      - name: Deploy to Results Website
        if: success()
        run: |
          # Clone and checkout existing branch if it exists, or create new
          BRANCH_NAME="${{ inputs.case_code }}_${{ inputs.author_name }}"
          git clone --branch "$BRANCH_NAME" --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/HarshM0210/Results.git website || \
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/HarshM0210/Results.git website
          cd website

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # If branch doesn't exist, create it
          if ! git rev-parse --verify "$BRANCH_NAME" >/dev/null 2>&1; then
            git checkout -b "$BRANCH_NAME"
          else
            git checkout "$BRANCH_NAME"
            git pull origin "$BRANCH_NAME" --rebase
          fi

          # Create directory structure
          mkdir -p "vandv_files/${{ inputs.case_code }}"

          # Copy plot folders
          if [ "${{ inputs.configuration }}" = "All" ]; then
            # Copy all configuration plot folders
            find ../results -name "plots" -type d | while read plot_dir; do
              config_name=$(basename $(dirname "$plot_dir"))
              target_dir="vandv_files/${{ inputs.case_code }}/${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${config_name}"
              if [ -d "$target_dir" ]; then
                echo "Overwriting existing results at $target_dir"
                rm -rf "$target_dir"
              fi
              cp -r "$plot_dir" "$target_dir"
            done
          else
            # Copy single configuration plot folder
            target_dir="vandv_files/${{ inputs.case_code }}/${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${{ inputs.configuration }}"
            
            # Find plots directory in results
            PLOTS_DIR=$(find ../results -name "plots" -type d | head -1)
            if [ -n "$PLOTS_DIR" ] && [ -d "$PLOTS_DIR" ]; then
              if [ -d "$target_dir" ]; then
                echo "Overwriting existing results at $target_dir"
                rm -rf "$target_dir"
              fi
              cp -r "$PLOTS_DIR" "$target_dir"
              echo "Copied plots from $PLOTS_DIR to $target_dir"
            else
              echo "No plots directory found in results"
              # Create empty target directory to ensure branch creation
              mkdir -p "$target_dir"
              echo "No plots available" > "$target_dir/README.txt"
            fi
          fi

          # Commit and push if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update validation results for ${{ inputs.case_code }} by ${{ inputs.author_name }}"
            git push --force origin "$BRANCH_NAME"
          else
            echo "No changes to commit"
          fi

      - name: Cleanup
        if: always()
        run: |
          # Clean up mesh folders in main repo
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          TURB_MODEL="${{ inputs.turbulence_model }}"
          CONFIG="${{ inputs.configuration }}"

          BASE_PATH="main-repo/ValidationCases/$CATEGORY/$CASE_CODE/$TURB_MODEL"

          if [ "$CONFIG" = "All" ]; then
            for config_dir in "$BASE_PATH"/Configuration*; do
              if [ -d "$config_dir" ]; then
                find "$config_dir" -name "*.csv" -delete 2>/dev/null || true
                find "$config_dir" -name "*.vtu" -delete 2>/dev/null || true
                find "$config_dir" -name "*.dat" -delete 2>/dev/null || true
                find "$config_dir" -name "*.su2" -delete 2>/dev/null || true
                find "$config_dir" -name "Config.cfg" -delete 2>/dev/null || true
              fi
            done
          else
            CONFIG_PATH="$BASE_PATH/$CONFIG"
            if [ -d "$CONFIG_PATH" ]; then
              find "$CONFIG_PATH" -name "*.csv" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.vtu" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.dat" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.su2" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "Config.cfg" -delete 2>/dev/null || true
            fi
          fi

          echo "Cleanup completed - mesh folders restored to original state"

      - name: Summary
        run: |
          echo "SU2 Validation Pipeline completed successfully!"
          echo "Case: ${{ inputs.category }}/${{ inputs.case_code }} - ${{ inputs.case_name }}"
          echo "Configuration: ${{ inputs.turbulence_model }}/${{ inputs.configuration }}"
          echo "Author: ${{ inputs.author_name }}"
          echo "Results deployed to: ${{ inputs.case_code }}_${{ inputs.author_name }} branch"
