name: SU2-Validation-Pipeline

on:
  workflow_dispatch:
    inputs:
      category:
        description: "Validation Case Category (Basic/Extended)"
        required: true
        type: choice
        options:
          - Basic
          - Extended
      case_name:
        description: "Validation Case Name (e.g., 2D Mixing Layer)"
        required: true
        type: string
      case_code:
        description: "Validation Case Code (e.g., 2DML)"
        required: true
        type: string
      turbulence_model:
        description: "Turbulence Model (SA/SST)"
        required: true
        type: choice
        options:
          - SA
          - SST
      configuration:
        description: "Configuration (e.g., Configuration 1 or All)"
        required: true
        type: string
      author_name:
        description: "Author Name (e.g., Harsh)"
        required: true
        type: string

jobs:
  su2-validation:
    runs-on: ubuntu-latest

    env:
      SU2_VANDV_REPO: https://github.com/HarshM0210/VandV.git
      SU2_VANDV_BRANCH: main

    steps:
      - name: Checkout SU2 Main Repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            cmake \
            ninja-build \
            libopenmpi-dev \
            openmpi-bin \
            swig \
            libboost-all-dev \
            libmetis-dev \
            libparmetis-dev \
            libhdf5-dev \
            zlib1g-dev \
            python3-dev \
            python3-pip \
            git \
            wget \
            libgl1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy matplotlib pyvista pandas

      - name: Clone and Build SU2 (without MPI)
        run: |
          git clone https://github.com/su2code/SU2.git
          cd SU2
          git checkout -b develop origin/develop
          python meson.py build \
            -Dwith-mpi=disabled \
            -Denable-pywrapper=true \
            --prefix=/usr/local
          ninja -C build
          sudo ninja -C build install
          sudo ldconfig
          echo "SU2_CFD path: $(which SU2_CFD)"
          echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Verify SU2 installation
        run: |
          SU2_CFD --help

      - name: Clone VandV Repo
        uses: actions/checkout@v4
        with:
          repository: HarshM0210/VandV
          ref: ${{ env.SU2_VANDV_BRANCH }}
          path: su2-vandv
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Configurations to Process
        id: configs
        run: |
          if [ "${{ github.event.inputs.configuration }}" == "All" ]; then
            BASE_PATH="ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}"
            CONFIGS=$(ls -d "$BASE_PATH"/*/ | xargs -n1 basename | tr '\n' ',' | sed 's/,$//')
            echo "configurations=${CONFIGS}" >> $GITHUB_OUTPUT
            echo "Processing ALL configurations: ${CONFIGS}"
          else
            echo "configurations=${{ github.event.inputs.configuration }}" >> $GITHUB_OUTPUT
            echo "Processing single configuration: ${{ github.event.inputs.configuration }}"
          fi

      - name: Process Configurations
        id: process_configs
        run: |
          IFS=',' read -ra CONFIG_ARRAY <<< "${{ steps.configs.outputs.configurations }}"
          for CONFIG in "${CONFIG_ARRAY[@]}"; do
            echo "::group::Processing configuration: ${CONFIG}"
            
            MAIN_CASE_PATH="ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}/${CONFIG}"
            VANDV_CASE_PATH="su2-vandv/ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}/${CONFIG}"

            # Copy files (no cleanup during processing)
            mkdir -p "${MAIN_CASE_PATH}"
            for mesh_dir in "${VANDV_CASE_PATH}"/*/; do
              if [ -d "$mesh_dir" ] && [[ ! "$(basename "$mesh_dir")" =~ ^\.\.?$ ]]; then
                mesh_name=$(basename "${mesh_dir}")
                target_dir="${MAIN_CASE_PATH}/${mesh_name}"
                mkdir -p "${target_dir}"
                cp -v "${mesh_dir}"/* "${target_dir}"/
                cp -v "${MAIN_CASE_PATH}/Config.cfg" "${target_dir}/"
              fi
            done

            # Run validation
            cd ValidationCases
            python Automation.py \
              "${{ github.event.inputs.category }}" \
              "${{ github.event.inputs.case_code }}" \
              "${{ github.event.inputs.turbulence_model }}" \
              "${CONFIG}"
            cd ..
            echo "::endgroup::"
          done

      - name: Archive Results
        uses: actions/upload-artifact@v4
        with:
          name: "${{ github.event.inputs.category }}_${{ github.event.inputs.case_code }}_${{ github.event.inputs.turbulence_model }}_${{ github.event.inputs.configuration | replace(' ', '_') }}_${{ github.event.inputs.author_name }}"
          path: |
            ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}/**/*.csv
            ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}/**/*.vtu
            ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}/**/*.png
            ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}/**/plots/
          retention-days: 14
          if-no-files-found: warn

      - name: Complete Cleanup
        run: |
          echo "Starting complete cleanup..."
          BASE_PATH="ValidationCases/${{ github.event.inputs.category }}/${{ github.event.inputs.case_code }}/${{ github.event.inputs.turbulence_model }}"

          if [ "${{ github.event.inputs.configuration }}" == "All" ]; then
            # Clean all configurations
            find "${BASE_PATH}" -type f \( -name "*.su2" -o -name "*.dat" \) -delete
            echo "Cleaned ALL configurations under ${BASE_PATH}"
          else
            # Clean only specified configuration
            CONFIG_PATH="${BASE_PATH}/${{ github.event.inputs.configuration }}"
            find "${CONFIG_PATH}" -type f \( -name "*.su2" -o -name "*.dat" \) -delete
            echo "Cleaned single configuration: ${CONFIG_PATH}"
          fi

          # Restore empty mesh folder structure
          IFS=',' read -ra CONFIG_ARRAY <<< "${{ steps.configs.outputs.configurations }}"
          for CONFIG in "${CONFIG_ARRAY[@]}"; do
            CONFIG_PATH="${BASE_PATH}/${CONFIG}"
            for mesh_dir in "${CONFIG_PATH}"/*/; do
              if [ -d "$mesh_dir" ]; then
                # Remove all files but keep directory structure
                find "$mesh_dir" -mindepth 1 -maxdepth 1 -exec rm -rf {} +
                echo "Reset empty folder: ${mesh_dir}"
              fi
            done
          done

          # Final verification
          echo "Final folder state:"
          find "${BASE_PATH}" -type d -empty -exec echo "[EMPTY] {}" \;
          find "${BASE_PATH}" -type f -name "*" | sort || echo "No files remaining"
