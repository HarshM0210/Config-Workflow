name: SU2 Validation Cases

on:
  workflow_dispatch:
    inputs:
      category:
        description: "Validation Case Category"
        required: true
        type: choice
        options:
          - Basic
          - Extended
      case_code:
        description: "Validation Case Code (e.g., 2DML)"
        required: true
        type: string
      turbulence_model:
        description: "Turbulence Model"
        required: true
        type: choice
        options:
          - SA
          - SST
      configuration:
        description: "Specific Configuration (e.g., Configuration1) or All"
        required: true
        type: string
      author_name:
        description: "Author Name"
        required: true
        type: string

env:
  GITHUB_WORKSPACE: ${{ github.workspace }}
  MAIN_REPO_PATH: ${{ github.workspace }}/main-repo
  MESH_REPO_PATH: ${{ github.workspace }}/turbmodels/Mesh_Files
  RESTART_REPO_PATH: ${{ github.workspace }}/turbmodels/Restart_Files

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Main Repo
        uses: actions/checkout@v4
        with:
          path: ${{ env.MAIN_REPO_PATH }}

      - name: Download Mesh and Restart Files from Google Drive
        run: |
          pip install gdown
          gdown --folder https://drive.google.com/drive/folders/1z6kSNo4Y62idDN3zTWsugMJhOEdpLt2r?usp=sharing -O turbmodels --fuzzy

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential cmake ninja-build libopenmpi-dev openmpi-bin swig \
            libboost-all-dev libmetis-dev libparmetis-dev libhdf5-dev zlib1g-dev \
            python3-dev python3-pip git wget libgl1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy matplotlib pyvista pandas

      - name: Install SU2
        run: |
          git clone https://github.com/su2code/SU2.git
          cd SU2
          git checkout -b develop origin/develop
          python meson.py build -Dwith-mpi=disabled -Denable-pywrapper=true --prefix=/usr/local
          ninja -C build
          sudo ninja -C build install
          sudo ldconfig
          echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV

      - name: Process Configurations
        run: |
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          TURB_MODEL="${{ inputs.turbulence_model }}"
          CONFIG="${{ inputs.configuration }}"
          AUTHOR="${{ inputs.author_name }}"

          MAIN_PATH="${{ env.MAIN_REPO_PATH }}/ValidationCases/$CATEGORY/$CASE_CODE/$TURB_MODEL"
          MESH_SRC="${{ env.MESH_REPO_PATH }}/$CATEGORY/$CASE_CODE"
          RESTART_SRC="${{ env.RESTART_REPO_PATH }}/$CATEGORY/$CASE_CODE/$TURB_MODEL"

          mkdir -p "${{ github.workspace }}/results"

          run_config() {
            CONF_NAME="$1"
            ROOT_ARTIFACT="$2"
            DEST_PATH="$MAIN_PATH/$CONF_NAME"

            # Determine proper artifact folder
            if [ -n "$ROOT_ARTIFACT" ]; then
              ARTIFACT_DIR="${{ github.workspace }}/results/$ROOT_ARTIFACT/$CONF_NAME"
            else
              ARTIFACT_NAME="${CATEGORY}_${CASE_CODE}_${TURB_MODEL}_${CONF_NAME}_${AUTHOR}"
              ARTIFACT_DIR="${{ github.workspace }}/results/$ARTIFACT_NAME"
            fi

            echo "[INFO] Processing Configuration: $CONF_NAME"
            mkdir -p "$ARTIFACT_DIR"

            for mesh in "$MESH_SRC"/*; do
              MESH_NAME=$(basename "$mesh")
              TARGET_DIR="$DEST_PATH/$MESH_NAME"

              mkdir -p "$TARGET_DIR"
              cp "$mesh/mesh.su2" "$TARGET_DIR/"
              cp "$RESTART_SRC/$CONF_NAME/$MESH_NAME/restart.dat" "$TARGET_DIR/"
              cp "$DEST_PATH/Config.cfg" "$TARGET_DIR/"
            done

            python3 "${{ env.MAIN_REPO_PATH }}/ValidationCases/Automation.py" \
              --category "$CATEGORY" \
              --case-code "$CASE_CODE" \
              --turbulence-model "$TURB_MODEL" \
              --configuration "$CONF_NAME" \
              --main-path "$MAIN_PATH" \
              --output-path "$ARTIFACT_DIR"
          }

          if [ "$CONFIG" = "All" ]; then
            ROOT_ARTIFACT_NAME="${CATEGORY}_${CASE_CODE}_${TURB_MODEL}_${AUTHOR}_All"
            for conf in "$MAIN_PATH"/Configuration*; do
              CONF_NAME=$(basename "$conf")
              run_config "$CONF_NAME" "$ROOT_ARTIFACT_NAME"
            done
          else
            run_config "$CONFIG"
          fi

      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.category }}_${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${{ inputs.configuration == 'All' && format('{0}_All', inputs.author_name) || format('{0}_{1}', inputs.configuration, inputs.author_name) }}
          path: ${{ github.workspace }}/results/

      - name: Deploy to Results Website
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/HarshM0210/Results.git website
          cd website

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          BRANCH="${{ inputs.case_code }}_${{ inputs.author_name }}"
          git checkout -b "$BRANCH" 2>/dev/null || git checkout "$BRANCH"

          mkdir -p vandv_files/${{ inputs.case_code }}

          if [ "${{ inputs.configuration }}" = "All" ]; then
            find "${{ github.workspace }}/results" -name plots -type d | while read plot_dir; do
              config=$(basename $(dirname "$plot_dir"))
              dest="vandv_files/${{ inputs.case_code }}/${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${config}"
              rm -rf "$dest"
              cp -r "$plot_dir" "$dest"
            done
          else
            plot_dir=$(find "${{ github.workspace }}/results" -name plots -type d | head -1)
            dest="vandv_files/${{ inputs.case_code }}/${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${{ inputs.configuration }}"
            rm -rf "$dest"
            cp -r "$plot_dir" "$dest"
          fi

          # Commit and push if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update validation results for ${{ inputs.case_code }} by ${{ inputs.author_name }}"
            git push origin "$BRANCH_NAME" --force
          else
            echo "No changes to commit"
          fi

      - name: Cleanup
        if: always()
        run: |
          # Clean up mesh folders in main repo
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          TURB_MODEL="${{ inputs.turbulence_model }}"
          CONFIG="${{ inputs.configuration }}"

          BASE_PATH="${{ env.MAIN_REPO_PATH }}/ValidationCases/$CATEGORY/$CASE_CODE/$TURB_MODEL"

          if [ "$CONFIG" = "All" ]; then
            for config_dir in "$BASE_PATH"/Configuration*; do
              if [ -d "$config_dir" ]; then
                find "$config_dir" -name "*.csv" -delete 2>/dev/null || true
                find "$config_dir" -name "*.vtu" -delete 2>/dev/null || true
                find "$config_dir" -name "*.dat" -delete 2>/dev/null || true
                find "$config_dir" -name "*.su2" -delete 2>/dev/null || true
                find "$config_dir" -name "Config.cfg" -delete 2>/dev/null || true
              fi
            done
          else
            CONFIG_PATH="$BASE_PATH/$CONFIG"
            if [ -d "$CONFIG_PATH" ]; then
              find "$CONFIG_PATH" -name "*.csv" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.vtu" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.dat" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.su2" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "Config.cfg" -delete 2>/dev/null || true
            fi
          fi

          echo "Cleanup completed - mesh folders restored to original state"

      - name: Summary
        run: |
          echo "SU2 Validation Pipeline completed!"
          echo "Case: ${{ inputs.category }}/${{ inputs.case_code }} - ${{ inputs.case_name }}"
          echo "Configuration: ${{ inputs.turbulence_model }}/${{ inputs.configuration }}"
          echo "Author: ${{ inputs.author_name }}"
          echo "Results deployed to: ${{ inputs.case_code }}_${{ inputs.author_name }} branch"
