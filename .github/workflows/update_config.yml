name: Update Config Options

on:
  workflow_dispatch:
    inputs:
      case_code:
        description: "Validation Case Code (e.g., 2DZP)"
        required: true
        type: string
      # You will dynamically inject inputs like below in a script:
      # CFL_NUMBER:
      #   description: "Enter CFL Number"
      #   required: false
      #   type: string

jobs:
  parse-and-update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read config and parse options
        id: parse_config
        run: |
          CONFIG_PATH="VandV/${{ github.event.inputs.case_code }}/config_sa_restart.cfg"
          echo "Config path: $CONFIG_PATH"
          echo "options=" >> $GITHUB_OUTPUT
          while IFS= read -r line; do
            if [[ $line == *"="* && $line != \#* ]]; then
              key=$(echo $line | cut -d '=' -f 1 | xargs)
              echo "::set-output name=${key// /_}::$(echo $line | cut -d '=' -f 2- | xargs)"
            fi
          done < "$CONFIG_PATH"

      - name: Modify config with new inputs
        run: |
          CONFIG_PATH="VandV/${{ github.event.inputs.case_code }}/config_sa_restart.cfg"
          TMP_FILE=$(mktemp)
          while IFS= read -r line; do
            if [[ $line == *"="* && $line != \#* ]]; then
              key=$(echo $line | cut -d '=' -f 1 | xargs)
              key_sanitized=${key// /_}
              input_value="${{ github.event.inputs[$key_sanitized] }}"
              if [[ ! -z "$input_value" ]]; then
                echo "$key = $input_value" >> "$TMP_FILE"
              else
                echo "$line" >> "$TMP_FILE"
              fi
            else
              echo "$line" >> "$TMP_FILE"
            fi
          done < "$CONFIG_PATH"
          mv "$TMP_FILE" "$CONFIG_PATH"
